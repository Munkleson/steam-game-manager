Diary/Struggles/overcoming Struggles

Fetching:

Fetching the whole Steam game list API each time you visit the search page was an issue, as the database for that is extremely large and fetching it would be slow. On top of that, filtering through it all prior to displaying it took a long time as it would have to loop through the whole list (which is about 230k results, of which a lot are not actual games or dlc even). CORS issue also meant it had to be retrieved on the Backend, as it wouldn't let me from the Frontend

In the end, the solution was to import them all into my database in their own tables: Games and DLC (InvalidGames was an option at the beginning, but there was an API found that only provided games and dlc, so checking if something didn't fit that was no longer needed). However, given that the number of games and dlc in the API are still around 180k results long, populating the games in the db with their details would not work as I would need to call on the API for each game to fetch the details. Unfortunately Steam only allows 100k calls per day, and even then there might be http throttling if I didn't stagger the calls one after another. Even staggering them 1 second at a time it would result in taking 50 hours, which is not tenable especially if I made a mistake with the seeding.

To populate the Games table with game details, instead of populating it myself, whenever a user enters a game into their owned games list, which doesn't have any details in Games, then it will send an API request to the Steam game API for that specific game and enter it into the database. This will reduce API calls for until someone actually uses a game.
- Note: I will have to consider how to handle this if down the line I want users to be able to see the details of a game before adding it, though chances are those kinds of users are few, as they would already know about the games they might want to add, or have seen the details elsewhere (like on actual Steam)

Now it is extremely fast in dev, as I am only searching in the database for "name LIKE input", but the issue remains that it still lags if typing too fast. When the amount of search results get smaller this wouldn't be an issue
- Will have to work on this more. The results are logged but the display dropdown function doesn't update with the results being logged. Have to find a way to delay the dropdown display until the results are fetched, even if a bit slower

I already made the search results fetching and display only happen when there are more than 4 characters in the input, which reduces fetching for words that will result in too many results (although this will not work for games that have less than 4 characters, but I have an idea for a workaround there, which is when the input is less than 4 characters search for an exact match of the game. As I'm typing this out I don't even know why I'm typing it out, it would be very easy to implement).

I think I need to move the searching logic and sorting (including levenshtein algorithm) to the backend to see if it fixes this issue.

There were issues in creating a game in the owned games list due to logic not having been changed yet, but it is mostly fixed. Currently, the create method is being used for the form submission, but if I submitted it from the frontend, I would get an error "No template found for OwnedGamesController#create, rendering head :no_content". Previously, I would want the action to redirect to another or even the same page (I wanted the user to be able to submit multiple games without refreshing) but this created an issue as it was expecting either a view, redirect, or json response. However, rendering a json response actually rendered a json response webpage rather than returning a response to the frontend. Not sure how to solve that error, so just set to redirecting for now.

Refactored my search logic to only display dropdown results if the input was over 4 letters long. This would serve to cut down on retrieving database details. However, in the refactoring of my logic I needed to create a new column in games and dlc that would function as a search name, cutting out all non alphanumeric characters, so that was populated through seeding. However, they were not lower cased so the lower casing still remains in the controllers/frontend until I need to optimize it further

Levenshtein calculating and sorting is now done in the backend to avoid edge cases where the transferring of data from the front to the backend and back would result in sometimes more than 10 search results displaying. Now only 10 results max are being returned from the backend. Not sure if this works faster with ruby sorting than JS sorting, but edge cases are solved here now.


Second thoughts for search algorithm:

It may be the case that the search algorithm should be done by recommendations (which would require another database column and seeding) rather than Levenshtein, or a combination of both.

May want to replace roman numerals with numbers in the search_name column, so if people search with Assassin's Creed 4 instead of Assassin's Creed IV, they still find it. Should prioritise other things first, as the search function works well enough for now

For searching dlcs and games, should keep them separate via a radio button. Putting them together would increase search time (though not by much, since DLC list would be about 30% of the games list). Would it be better for users to be able to search both at the same time?


User experience:

Made a dropdown menu selector with up and down arrows.

Decided for best UE that if the input didn't match anything on the games list, it would select the top option. This serves as a sort of autocomplete option.
May be better if it only did it when there was one option though, I'm wondering if there would be edge cases if too janky.
Maybe I could do an actual autocomplete where it would take the top option regardless of how many there are.
This way, there should never be a realistic time (unless the input is under 3 or 4 characters long) where someone should submit without a full game in the input
